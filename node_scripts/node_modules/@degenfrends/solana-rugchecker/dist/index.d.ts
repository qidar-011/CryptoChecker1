import { Connection } from '@solana/web3.js';
import { Metaplex } from '@metaplex-foundation/js';

declare class MetadataCheckConfig {
    solanaRpcEndpoint?: string;
    heliusApiKey?: string;
}

declare class MetadataCheckResult {
    address: string;
    name: string;
    symbol: string;
    imageUrl: string;
    description: string;
    website: string;
    telegram: string;
    twitter: string;
    isMutable: boolean;
    isMintable: boolean;
    isFreezable: boolean;
    isPumpFun: boolean;
}

declare class MetadataChecker {
    private connection;
    private metaplex;
    private heliusApiKey;
    constructor({ solanaRpcEndpoint, heliusApiKey }: MetadataCheckConfig, connection?: Connection, metaplex?: Metaplex);
    check(tokenAddress: string): Promise<MetadataCheckResult>;
    private createRugCheckResult;
    getHeliusMetadata(tokenAddress: string, token: MetadataCheckResult): Promise<MetadataCheckResult>;
}

declare class HolderCheckResult {
    address: string;
    amount: number;
    percentage: number;
}

declare class HoldersCheckResult {
    address: string;
    topHolders: HolderCheckResult[];
    topHoldersPercentage: number;
    raydiumPercentage: number;
}

declare class LiquidityCheckResult {
    address: string;
    isLiquidityLocked: boolean;
    burnt: number;
    liquidityPoolAddress: string;
}

declare class MarketdataCheckResult {
    address: string;
    priceSol: number;
    priceUsd: number;
    liquidityUsd: number;
    fdv: number;
    volume24h: number;
    volume6h: number;
    volume1h: number;
    volume5m: number;
    priceChange24h: number;
    priceChange6h: number;
    priceChange1h: number;
    priceChange5m: number;
    buys24h: number;
    buys6h: number;
    buys1h: number;
    buys5m: number;
    sells24h: number;
    sells6h: number;
    sells1h: number;
    sells5m: number;
}

declare class RugCheckResult {
    address: string;
    metadata: MetadataCheckResult;
    holders: HoldersCheckResult;
    liquidity: LiquidityCheckResult;
    marketdata: MarketdataCheckResult;
}

declare class RugCheckConfig {
    solanaRpcEndpoint?: string;
    poolFilePath?: string;
    poolAddress?: string;
    heliusApiKey?: string;
}

declare class HoldersCheckConfig {
    solanaRpcEndpoint?: string;
}

declare class HoldersChecker {
    private connection;
    constructor({ solanaRpcEndpoint }: HoldersCheckConfig, connection?: Connection);
    check(tokenAddress: string): Promise<HoldersCheckResult>;
}

declare class LiquidityCheckConfig {
    solanaRpcEndpoint?: string;
    poolFilePath?: string;
    poolAddress?: string;
}

declare class LiquidityChecker {
    private connection;
    private poolFilePath;
    private poolAddress;
    constructor({ solanaRpcEndpoint, poolFilePath, poolAddress }: LiquidityCheckConfig, connection?: Connection);
    check(tokenAddress: string): Promise<LiquidityCheckResult>;
    getLiquidityPool(tokenAddress: string): Promise<any>;
    getRaydiumPoolAddress(mintAddress: string): Promise<any>;
}

declare class WebsiteCheckResult {
    address: string;
    createdAt: Date;
    registrarUrl: string;
    reseller: string;
    nameServer: string;
    registrantName: string;
    registrantOrganization: string;
    registrantStreet: string;
    registrantCity: string;
    registrantStateProvince: string;
    registrantPostalCode: string;
    registrantCountry: string;
    registrantPhone: string;
    registrantEmail: string;
}

declare class WebsiteChecker {
    constructor();
    check(website: string): Promise<WebsiteCheckResult>;
}

declare class MarketdataCheckConfig {
}

declare class MarketdataChecker {
    constructor({}: MarketdataCheckConfig);
    check(tokenAddress: string): Promise<MarketdataCheckResult>;
    private createMarketdataCheckResult;
}

declare class SPLRugchecker {
    private holdersChecker;
    private liquidityChecker;
    private metadataChecker;
    private marketdataChecker;
    constructor({ solanaRpcEndpoint, poolFilePath, poolAddress, heliusApiKey }: RugCheckConfig);
    check(tokenAddress: string): Promise<RugCheckResult>;
    rugScore(rugCheckResult: RugCheckResult): number;
    isRug(rugCheckResult: RugCheckResult): boolean;
}

export { HoldersCheckConfig, HoldersChecker, LiquidityCheckConfig, LiquidityChecker, MarketdataCheckConfig, MarketdataChecker, MetadataCheckConfig, MetadataChecker, RugCheckConfig, WebsiteChecker, SPLRugchecker as default };
